package cpu
import chisel._

class branch_presolve extends Module
{
    val io=new Bundle{
        val i_fetch_pack = new i_fetch_pack().asInput
        val i_branch_predict_pack = new branch_predict_pack().asInput

        val o_branch_presolve_pack = new o_branch_presolve_pack().asOutput
    }
    val is_jump
    val is_branch
    val is_ret
    val is_call

    val wrong_prediction = 
    val insts = Vec(2,Wire(UInt(32.W)))
    insts[0] := i_fetch_pack.inst[0]
    insts[1] := i_fetch_pack.inst[1]
    val branch_decoder = Vec(2,decoder)
    branch_decoder[0] := decoder(QMCMinimizer , insts[0] , TruthTable(
        Map{
            BitPat("b?????????????????000?????1100011") -> BitPat("b0100"),//BEQ
            BitPat("b?????????????????001?????1100011") -> BitPat("b0100"),//BNE
            BitPat("b?????????????????100?????1100011") -> BitPat("b0100"),//BLT
            BitPat("b?????????????????101?????1100011") -> BitPat("b0100"),//BGE
            BitPat("b?????????????????110?????1100011") -> BitPat("b0100"),//BLTU
            BitPat("b?????????????????111?????1100011") -> BitPat("b0100"),//BGEU
            BitPat("b?????????????????000?????1100111") -> BitPat("b1000"),//JALR
            BitPat("b?????????????????????????1101111") -> BitPat("b1000"),//JAL
            BitPat("b00110000001000000000000000000000") -> BitPat("b0010"),//MRET
            BitPat("b00000000000000000000000001110012") -> BitPat("b0001"),//SCALL
        },
        BitPat("0000")
    ))
    branch_decoder[1] := decoder(QMCMinimizer , insts[1] , TruthTable(
        Map{
            BitPat("b?????????????????000?????1100011") -> BitPat("b0100"),//BEQ
            BitPat("b?????????????????001?????1100011") -> BitPat("b0100"),//BNE
            BitPat("b?????????????????100?????1100011") -> BitPat("b0100"),//BLT
            BitPat("b?????????????????101?????1100011") -> BitPat("b0100"),//BGE
            BitPat("b?????????????????110?????1100011") -> BitPat("b0100"),//BLTU
            BitPat("b?????????????????111?????1100011") -> BitPat("b0100"),//BGEU
            BitPat("b?????????????????000?????1100111") -> BitPat("b1000"),//JALR
            BitPat("b?????????????????????????1101111") -> BitPat("b1000"),//JAL
            BitPat("b00110000001000000000000000000000") -> BitPat("b0010"),//MRET
            BitPat("b00000000000000000000000001110012") -> BitPat("b0001"),//SCALL
        },
        BitPat("0000")
    ))

    is_jump :: is_branch :: is_ret :: is_call := branch_decoder[0].toBools() | branch_decoder[1].toBools() ; 
    
    Val mispredict = (! i_branch_predict_pack.valid && (is_jump&is_branch&is_call&is_ret) )||  (i_branch_predict_pack.valid && !(is_jump&is_branch&is_call&is_ret))
    val mispred_pc = i_fetch_pack.pc

    o_branch_presolve_pack.mispred := mispredict
    o_branch_presolve_pack.pc := mispred_pc

}